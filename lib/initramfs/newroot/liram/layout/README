TODO: move this to /doc/shlib.rst

----------------
 Adding layouts
----------------

As usual, a shlib module consists of two files, a code file that provides
shell code (functions and variables) and optionally a dependency file that
lists other modules which should be included in the linked file.

As for the dependency file, simply symlink "<layout name>.depend" to
"default.depend" (or copy it) unless extra functionality is required.

The "<layout name>.sh" file should contain at least one function,
int liram_populate_layout_<layout name>(), which somehow populates
${NEWROOT}. The actual implementation is up to you, see the existing
layouts for working examples, especially the "default" layout.

The code file may also implement helper functions.
Their naming convention is

   @private <return type> liram_layout_<layout name>__<function name>()

which also clarifies that you should _not_ export such functions to other
layouts and/or modules. These function can then be accessed directly or via

   liram_populate_helper <function name>

Generic functionality should be implemented by other modules.
For example, put that function into the liram/extra module or
create a parent layout and inherit it in your specific layout(s)
by simply calling

   liram_populate_inherit <parent layout name>

You may ignore this at your own discretion, but beware of side effects
like function redefinition.


Some random notes:
* Always document what your layout does, e.g. list which directories will be
  populated/modified and whether failure is mission critical (raises
  liram_die() on error) or not
* Never modify an existing layout in a non-backwards-compatible way unless
  the change is a bugfix. Create a new layout <layout name>[_<identifier>]
  instead, e.g. "default_r1" or "desktop_default".
* When modifying an existing layout, make sure that it behaves like before
  by default (i.e., don't require "downstream" changes in order to get
  the old functionality)
* The (new) layout should work ;)
* You should mark a new layout as experimental so that it gets exempted from
  the "do not modify" rules above.
  Just add a comment stating "EXPERIMENTAL" to the top of the code file.
