# bash completion for cmdpool-manage, cmdpool-view
# -*- coding: utf-8 -*-

# void _cmdpool_comp_slots__globbed (
#    slot_dir, flag_file="", relpath_root="", **words!
# )
#
_cmdpool_comp_slots__globbed() {
   local x
   for x in "${1}/"?*; do
      if [[ -d "${x}" ]]; then
         if [[ -e "${x}/initialized" ]]; then
            # is a slot
            if [[ ( -z "${2-}" ) || ( -e "${x}/${2}" ) ]]; then
               words+=" ${3-}${x##*/}"
            fi
         else
            # resolve by recursion
            _cmdpool_comp_slots__globbed "${x}" "${2-}" "${3-}${x##*/}/"
         fi
      fi
   done
}

# void _cmdpool_comp_slots__ls() {
#    slot_dir, flag_file="", relpath_root="", **words!
# )
#
_cmdpool_comp_slots__ls() {
   local ls_x x
   for ls_x in $(ls -1 "${1}"/ 2>/dev/null ); do
      x="${1}/${ls_x##*/}"

      if [[ -d "${x}" ]]; then
         if [[ -e "${x}/initialized" ]]; then
            # is a slot
            if [[ ( -z "${2-}" ) || ( -e "${x}/${2}" ) ]]; then
               words+=" ${3-}${x##*/}"
            fi
         else
            # resolve by recursion
            _cmdpool_comp_slots__ls "${x}" "${2-}" "${3-}${x##*/}/"
         fi
      fi
   done
}

# void _cmdpool_comp_slots ( slot_dir, flag_file="", **words! )
#
_cmdpool_comp_slots() {
   if [[ -z "${1-}" ]]; then
      return 0
   elif [[ $- == *"f"* ]]; then
      _cmdpool_comp_slots__ls "${1}" "${2-}" ""
   else
      _cmdpool_comp_slots__globbed "${1}" "${2-}" ""
   fi
}

_cmdpool_comp() {
   local cur prev

   COMPREPLY=()
   _get_comp_words_by_ref cur prev

   local COMMAND_ARGS=(
      'abandon' 'autodel' 'check' 'cleanup' 'list' 'ls' 'query'
      'run' 'start' 'stop' 'stopall' 'wait'
   )

   local have_command=
   local k
   local kprev
   local argv_remainder=()
   local cmdpool_root="/run/cmdpool.${USER}/default"

   for k in "${COMP_WORDS[@]}"; do

      if [[ "${have_command}" ]]; then
         argv_remainder+=( "${k}" )

      elif [[ -z "${kprev+SET}" ]]; then
         kprev=
         continue

      elif \
         [[ ( -n "${k}" ) && ( " ${COMMAND_ARGS[*]} " == *" ${k} "* ) ]]
      then
         have_command="${k}"

      elif \
         [[ ( "${kprev}" == "-C" ) || ( "${kprev}" == "--cmdpool-root" ) ]]
      then
         cmdpool_root="${k}"

      fi

      kprev="${k}"
   done

   kprev=

   local words= option_words=
   k=$(( ${#argv_remainder[@]} - 1 ))

   case "${have_command}" in
      '')
         case "${prev}" in
            '--cmdpool-root'|'-C')
               _filedir -d
            ;;
            '--runcmd'|'-X')
               _filedir
            ;;
            *)
               option_words+=" --help --debug --no-debug --cmdpool-root --runcmd"
               if [[ "${cur}" != "--"* ]]; then
                  if [[ "${cur}" != "-"* ]]; then
                     words+=" ${COMMAND_ARGS[*]}"
                  fi
                  option_words+=" -h -C -X"
               fi
            ;;
         esac
      ;;

      'list'|'ls')
         case "${prev}" in
            '--exact')
               _cmdpool_comp_slots "${cmdpool_root}"
            ;;
            *)
               option_words+=" --names --exact"
               if [[ "${cur}" != "-"* ]]; then
                  _cmdpool_comp_slots "${cmdpool_root}"
               fi
            ;;
         esac
      ;;

      'run'|'start')
         # TODO (nice to have): could complete commands here
         #
         if [[ ${k} -eq 0 ]]; then
            # slot name or "--"
            words+=" \"\" --"
         elif [[ ( ${k} -eq 1 ) && ( "${prev}" != "--" ) ]]; then
            words+=" --"
         fi
      ;;

      'check')
         if [[ ${k} -eq 0 ]]; then
            _cmdpool_comp_slots "${cmdpool_root}"
         fi
      ;;

      'stop')
         if [[ ${k} -eq 0 ]]; then
            _cmdpool_comp_slots "${cmdpool_root}" running
         fi
      ;;

      'query')
         if [[ ${k} -eq 0 ]]; then
            words="1 2 ret stdout stderr returncode slot"
         elif [[ ${k} -eq 1 ]]; then
            _cmdpool_comp_slots "${cmdpool_root}"
         fi
      ;;

      'wait')
         case "${prev}" in
            '-t'|'--timeout')
               true
            ;;
            *)
               option_words+=" --timeout -t"
               _cmdpool_comp_slots "${cmdpool_root}" running
            ;;
         esac
      ;;

      'abandon'|'autodel')
         if [[ ${k} -eq 0 ]]; then
            _cmdpool_comp_slots "${cmdpool_root}" done
         fi
      ;;

      'cleanup')
         [[ "${prev}" == "--exact" ]] || option_words+=" --exact"
         _cmdpool_comp_slots "${cmdpool_root}" auto_cleanup
      ;;

      'stopall')
         [[ "${prev}" == "--exact" ]] || option_words+=" --exact"
         _cmdpool_comp_slots "${cmdpool_root}" running
      ;;

   esac

   if [[ -n "${option_words# }" ]]; then
      COMPREPLY+=( $( compgen -W "${option_words# }" -- "${cur}" ) )
   fi

   if [[ -n "${words# }" ]]; then
      COMPREPLY+=( $( compgen -W "${words# }" -- "${cur}" ) )
   fi
}


if type -P cmdpool-manage 1>/dev/null 2>/dev/null; then
   complete -F _cmdpool_comp cmdpool-manage
fi
if type -P cmdpool-view 1>/dev/null 2>/dev/null; then
   complete -F _cmdpool_comp cmdpool-view
fi
